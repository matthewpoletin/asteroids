//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Media/battle/controls/ShipControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Asteroids.Field
{
    public partial class @ShipControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @ShipControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""ShipControls"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""65aed448-53c0-4fcc-8463-94098fb30d7c"",
            ""actions"": [
                {
                    ""name"": ""Steer"",
                    ""type"": ""Value"",
                    ""id"": ""1e5e1be1-b477-4e8d-8941-05f3017435e9"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""09e13aca-87a8-448c-9744-988b638dfa54"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootCannon"",
                    ""type"": ""Button"",
                    ""id"": ""70878c54-0739-49d5-82b3-3c285e79f7c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShootLaser"",
                    ""type"": ""Button"",
                    ""id"": ""6d74831b-90a5-4ac4-8b04-e3ca6201679e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""92b2d586-f596-45c9-b6a1-c145ea4d7e7c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2c540b08-8e7a-4d62-9049-5d82a496c19d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""58d120b1-092f-4444-a075-441a8c7c1eb5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""3a041b21-bba7-465c-a323-a3cb50830011"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootCannon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""315a2764-489a-4546-956a-ed564bf6d336"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b26ca66f-0c85-4eb8-ba5f-5355142f0ab3"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ShootLaser"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Default
            m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
            m_Default_Steer = m_Default.FindAction("Steer", throwIfNotFound: true);
            m_Default_Accelerate = m_Default.FindAction("Accelerate", throwIfNotFound: true);
            m_Default_ShootCannon = m_Default.FindAction("ShootCannon", throwIfNotFound: true);
            m_Default_ShootLaser = m_Default.FindAction("ShootLaser", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Default
        private readonly InputActionMap m_Default;
        private IDefaultActions m_DefaultActionsCallbackInterface;
        private readonly InputAction m_Default_Steer;
        private readonly InputAction m_Default_Accelerate;
        private readonly InputAction m_Default_ShootCannon;
        private readonly InputAction m_Default_ShootLaser;
        public struct DefaultActions
        {
            private @ShipControls m_Wrapper;
            public DefaultActions(@ShipControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Steer => m_Wrapper.m_Default_Steer;
            public InputAction @Accelerate => m_Wrapper.m_Default_Accelerate;
            public InputAction @ShootCannon => m_Wrapper.m_Default_ShootCannon;
            public InputAction @ShootLaser => m_Wrapper.m_Default_ShootLaser;
            public InputActionMap Get() { return m_Wrapper.m_Default; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
            public void SetCallbacks(IDefaultActions instance)
            {
                if (m_Wrapper.m_DefaultActionsCallbackInterface != null)
                {
                    @Steer.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSteer;
                    @Steer.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSteer;
                    @Steer.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnSteer;
                    @Accelerate.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAccelerate;
                    @Accelerate.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAccelerate;
                    @Accelerate.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnAccelerate;
                    @ShootCannon.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnShootCannon;
                    @ShootCannon.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnShootCannon;
                    @ShootCannon.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnShootCannon;
                    @ShootLaser.started -= m_Wrapper.m_DefaultActionsCallbackInterface.OnShootLaser;
                    @ShootLaser.performed -= m_Wrapper.m_DefaultActionsCallbackInterface.OnShootLaser;
                    @ShootLaser.canceled -= m_Wrapper.m_DefaultActionsCallbackInterface.OnShootLaser;
                }
                m_Wrapper.m_DefaultActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Steer.started += instance.OnSteer;
                    @Steer.performed += instance.OnSteer;
                    @Steer.canceled += instance.OnSteer;
                    @Accelerate.started += instance.OnAccelerate;
                    @Accelerate.performed += instance.OnAccelerate;
                    @Accelerate.canceled += instance.OnAccelerate;
                    @ShootCannon.started += instance.OnShootCannon;
                    @ShootCannon.performed += instance.OnShootCannon;
                    @ShootCannon.canceled += instance.OnShootCannon;
                    @ShootLaser.started += instance.OnShootLaser;
                    @ShootLaser.performed += instance.OnShootLaser;
                    @ShootLaser.canceled += instance.OnShootLaser;
                }
            }
        }
        public DefaultActions @Default => new DefaultActions(this);
        public interface IDefaultActions
        {
            void OnSteer(InputAction.CallbackContext context);
            void OnAccelerate(InputAction.CallbackContext context);
            void OnShootCannon(InputAction.CallbackContext context);
            void OnShootLaser(InputAction.CallbackContext context);
        }
    }
}
